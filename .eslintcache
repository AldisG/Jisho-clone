[{"C:\\Users\\Lord\\Desktop\\test\\src\\index.js":"1","C:\\Users\\Lord\\Desktop\\test\\src\\App.js":"2","C:\\Users\\Lord\\Desktop\\test\\src\\reportWebVitals.js":"3","C:\\Users\\Lord\\Desktop\\test\\src\\Results.js":"4"},{"size":500,"mtime":1609681932321,"results":"5","hashOfConfig":"6"},{"size":167,"mtime":1609683288582,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":19838,"mtime":1610034779926,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1sja189",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\Lord\\Desktop\\test\\src\\index.js",[],["20","21"],"C:\\Users\\Lord\\Desktop\\test\\src\\App.js",[],"C:\\Users\\Lord\\Desktop\\test\\src\\reportWebVitals.js",[],"C:\\Users\\Lord\\Desktop\\test\\src\\Results.js",["22","23","24","25"],"import React, {useState} from \"react\";\r\nimport Search from \"./search.png\";\r\n\r\nexport default function SearchJWords(){\r\n    //states- input query, movies\r\n    const [query, setQuery] = useState('');\r\n    //create the state for movies, and update that state appropriate\r\n    const [words, setWords] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const count = words.length\r\n    const canScroll = true\r\n    const [smallScroll, largeScroll] = [200, 310]\r\n    const url = `https://jisho.org/api/v1/search/words?keyword=%22${query}%22&`\r\n    // const urlWithProxy = `https://cors-anywhere.herokuapp.com/https://jisho.org/api/v1/search/words?keyword=%22${query}%22&`\r\n    \r\n    const scrollTop = number => window.scrollTo({\r\n            top: number,\r\n            behavior: 'smooth'  \r\n    });  \r\n        \r\n    const searchJWords = async e => {\r\n        e.preventDefault();\r\n        setIsLoading(true)\r\n        \r\n        try {\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            const allData = data.data;\r\n            \r\n            // allData.length !== 0 ? setWords(allData,[]) : []\r\n            setWords(allData,[])\r\n\r\n\r\n            // console.log(\"Finished loading!\")\r\n            setIsLoading(false)\r\n        }\r\n        catch(err){console.log(\"WTF\", err)}\r\n        // scroll only when isnt in the right place\r\n        window.scroll !== largeScroll && scrollTop(largeScroll)\r\n    }\r\n    \r\n    const searchSentencesLink = link =>{\r\n        console.log(link)\r\n    }\r\n    // vai šis nav labaks variants(ja animēšu) :\r\n    // --- {a.is_common && <h5>(Is common)</h5>} ---\r\n    // patreizējam \"<h5>{a.is_common && \"(Is common)\"}</h5>\"?????????/\r\n    // console.log(words)\r\n    return (\r\n        <>\r\n            <div className=\"search-block-container\">\r\n                <form onSubmit={searchJWords}>\r\n                    <div className=\"search-block\">\r\n                        <h1>Japanese dictionary</h1>\r\n                        <div className=\"search-jp-eng-search-container\">\r\n                            <div className=\"search-block-container\">\r\n                                <input  \r\n                                    type=\"text\" \r\n                                    name=\"query\"\r\n                                    placeholder=\"Search for a word...\"\r\n                                    value={query} \r\n                                    onChange={ e => setQuery(e.target.value)}\r\n                                />\r\n                                {/* <button type=\"button\" className=\"search-btn\"> ? </button> */}\r\n\r\n                                <button className=\"search-btn\"\r\n                                    type=\"submit\" \r\n                                    onClick={ e => (\r\n                                    searchJWords,\r\n                                    scrollTop(largeScroll)\r\n                                    )}>\r\n                                    {isLoading ? \"Loading\" : <img src={Search} className=\"search-icon\" alt=\"\"></img>}\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n                            <div className=\"lang-btn-container\">\r\n                                <button className=\"switch-lang english-btn active-lang\">\r\n                                    <div>EN</div>\r\n                                </button>\r\n                                <button className=\"switch-lang japanese-btn\">\r\n                                    <div>JP</div>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n\r\n            {/* Shows how many search results */}\r\n            <p className=\"search-counter-p\">{ count === \"0\" ? \"Search for something...\" : count + \" Search results\" } </p>\r\n            {/* <p className=\"search-counter-p\"> <b>{count}</b> search results</p> */}\r\n            \r\n            {/* CARD CODE ------------------------------------------------------------ */}\r\n                \r\n            {words.map((a, index)=>{\r\n                    // (needs \"return\" to work)\r\n                    //ŠĶĪET lens viss ir tpc ka vajag savu proxy uzkodet, jo tas ekstra links ir lens\r\n                    \r\n                    const [translations] = a.senses.map((b, index)=>{return(b.english_definitions.map(c=>{return(`${c}`)}))})\r\n                    \r\n                    const [reading] =  a.japanese.map( b=> { return(b.reading) })\r\n                    \r\n                    const [searchWord] = a.japanese.map( b=> { return(b.word) })\r\n                    \r\n                    // Neatgriez jaut zīmi ??????????????????????????????????????????????????????????????????????????\r\n                    const jlpt = a.jlpt.map( b =>{ return(b !== \"\" ? b.slice(-2) : \"adwdawdawdawd?\")})\r\n                    // const NNN = jlpt !== \"\" ? jlpt.length() -2 : \"\"\r\n                    \r\n                    const [wordType] = a.senses.map( b =>{\r\n                        return(b.parts_of_speech.map(d => {\r\n                            return(d)\r\n                        }) )} )\r\n                \r\n// ------------------------------------search also poga\r\n\r\n\r\n\r\n\r\n                    const seeAlso = a.senses.map( b =>{\r\n                        return(b.see_also.map((c, index)=>{\r\n\r\n                        // splits both values up and you can add second value in the [], to get the second item, if its not there, it returns as unindentified!\r\n                        const [oneWord] = c.split(/(?<=^\\S+)\\s/)\r\n                        // console.log(wordType)\r\n\r\n                        // FOR SOME REASON THIS CODE RUNS 2x... the {c}\r\n\r\n                    return(\r\n                        <a key={index}\r\n                                className=\"see-also-btn btn element-small\"\r\n                                href=\"#\"\r\n                                // value={oneWord}\r\n                                // type=\"text\"\r\n                                \r\n                                onClick={ e => {\r\n                                    // (e) ir tas, kas šim kodam ļauj strādāt kā tieši attiecināt uz konkrēto elementu (ja lieto tik (c), tad viņš ņem visu sarakstu un nevar padot tekstu uz galveno search funkciju)\r\n                                    const searchSeeAlso = e.target.value\r\n                                    setQuery(searchSeeAlso)\r\n                                    window.scroll !== largeScroll && scrollTop(largeScroll)\r\n                                    \r\n                                }}>\r\n                                {oneWord}\r\n                            </a>\r\n                            \r\n                        )} \r\n                        ))\r\n                        }\r\n\r\n                    )\r\n                    // Here goes the mochup\r\n                    return(\r\n                    <div className=\"card\">\r\n                        <div key={index} className=\"card-container has-a-gap\">\r\n\r\n{/* ------------------------------------------KANJI & READING --------------------------------------------------------- */}\r\n                            <div className=\"translation-container has-a-gap\">\r\n\r\n\r\n                                <div className=\"kanji element row-1\">\r\n                                    <div>{searchWord}</div>\r\n                                </div>\r\n\r\n                                <div className=\"reading element row-1\">\r\n                                    <div>[{reading}]</div>\r\n                                </div>        \r\n                            </div>        \r\n                                \r\n{/* ------------------------------------------COMMON % WORD TYPE --------------------------------------------------------- */}\r\n\r\n                            <div className=\"common-type-container has-a-gap\">\r\n                                <div className=\"common element row-1\">\r\n                                    <div>{a.is_common ? \"common\" : \"uncommon\"}</div>\r\n                                </div>\r\n\r\n                                {/* Word type */}\r\n                                <div className=\"word-type element row-1\">\r\n                                    <div>\r\n                                        {wordType.map((x,i,arr) => (i < arr.length-1) ? (` ${x},`) : (` ${x}`))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n{/* ------------------------------------------JLPT LEVELS --------------------------------------------------------- */}\r\n\r\n                            <div className=\"jlpt-wrapper\">\r\n                                {/* {const NLevel = (jlpt.length -2)} */}\r\n                                {console.log(jlpt)}\r\n                                <div className=\"element-level row-1\">{jlpt}</div>\r\n                                <div className=\"element-level row-1\">{jlpt}</div>\r\n                                <div className=\"element-level row-1 current-level\">{jlpt}</div>\r\n                                <div className=\"element-level row-1\">{jlpt}</div>\r\n                                <div className=\"element-level row-1\">{jlpt}</div>\r\n                            </div>\r\n\r\n                            {/* translations -------------------------------------------------*/}\r\n                            <div className=\"meanings-wrapper element\">\r\n                                <h5>Translations:</h5>\r\n                                <ul>\r\n                                    {translations.map( (a, index) => <li key={index}>{index + 1}) {a}</li> )}    \r\n                                </ul>\r\n                            </div>\r\n\r\n\r\n{/* ------------------------------------------SENTENCES --------------------------------------------------------- */}\r\n\r\n                            <div className=\"sentences-wrapper element\">\r\n                                <b>Jisho.org</b> \r\n                                <br/>\r\n                                <p>Sentences with: </p>\r\n                                { searchWord !== undefined &&\r\n                                    <a \r\n                                        href={`https://jisho.org/search/${searchWord}%20%23sentences`} \r\n                                        className=\"see-sentences-btn btn element-small\">\r\n                                        {searchWord}\r\n                                    </a>\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n{/* ------------------------------------------SEARCH ALSO --------------------------------------------------------- */}\r\n\r\n                        <div class=\"search-also element-small\">\r\n                            <b>See also:</b>\r\n                            { seeAlso !== undefined && seeAlso}\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            } )\r\n                }\r\n\r\n\r\n            {/* Button up> */}\r\n            {count > 1 && (\r\n                <button className=\"button\"\r\n                    onClick={ e => scrollTop(smallScroll) }>\r\n                    Scroll back to Search\r\n                </button>\r\n            )}\r\n\r\n\r\n                    \r\n{/* <hr/>\r\n                <div className=\"card\">\r\n\r\n                    <div className=\"card-container has-a-gap\">\r\n                        <div className=\"translation-container has-a-gap\">\r\n                            <div className=\"kanji element row-1\">\r\n                                <div>犬犬犬</div>\r\n                            </div>\r\n                            <div className=\"reading element row-1\">\r\n                                <div>いぬ</div>\r\n                            </div>                 \r\n                        </div>\r\n\r\n                        <div className=\"common-type-container has-a-gap\">\r\n                            <div className=\"common element row-1\">\r\n                                <div>common word</div>\r\n                            </div>\r\n                            <div className=\"word-type element row-1\">\r\n                                <div>noun, suru verb</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"jlpt-wrapper\">\r\n                            <div className=\"element-level row-1\">N1</div>\r\n                            <div className=\"element-level row-1\">N2</div>\r\n                            <div className=\"element-level row-1 current-level\">N3</div>\r\n                            <div className=\"element-level row-1\">N4</div>\r\n                            <div className=\"element-level row-1\">N5</div>\r\n                        </div>\r\n                        \r\n                        <div className=\"meanings-wrapper element\">\r\n                            <h5>Translations:</h5>\r\n                            <ul>\r\n                                <li>1 Meaning dogMeaning dog Meaning dogMeaning dogMeaning dogMeaning dogMeaning dogMeaning dogMeaning dogMeaning dogMeaning dogMeaning dog</li>\r\n                                <li>2 Meaning Dog 2</li>\r\n                                <li>3 Meaning dog 3</li>\r\n                                <li>3 Meaning dog 3</li>\r\n                                <li>3 Meaning dog 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"sentences-wrapper element\">\r\n                            <b>Jisho.org</b> \r\n                            <br/>\r\n                            <p>Sentences with: </p>\r\n                            <a href=\"#\" className=\"see-sentences-btn btn element-small\">\r\n                                bouken\r\n                            </a>  \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"search-also element-small\">\r\n                        <b>See also:</b>\r\n                        <a href=\"#\" className=\"see-also-btn btn element-small\">Dog 1</a>\r\n                        <a href=\"#\" className=\"see-also-btn btn element-small\">Dog 2</a>\r\n                    </div>\r\n\r\n                </div> */}\r\n                        {/* {\r\n                            count > 1 && (\r\n                                <button className=\"button\"\r\n                                    onClick={ e => scrollTop(smallScroll) }>\r\n                                    Scroll back to Search\r\n                                </button>\r\n                            )\r\n                        } */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n// <div className=\"body\">\r\n//             <form className=\"search-block-container\" onSubmit={searchJWords}>\r\n//                 <p className=\"search-counter-p\">\r\n//                     {count === 0 ? (isLoading ? \"Loading..\" : \"Search a word\") : (isLoading ? \"Loading..\" : \"Search something else?\")}\r\n//                 </p>\r\n\r\n//                 {/* <label className=\"label\" htmlFor=\"query\">Search for...</label> */}\r\n\r\n//                 <input className=\"input\" \r\n//                     type=\"text\" \r\n//                     name=\"query\"\r\n//                     placeholder=\"Search for a word...\"\r\n//                     value={query} \r\n//                     onChange={ e => setQuery(e.target.value)}\r\n//                 />\r\n                \r\n//                 <button className=\"search-btn\"\r\n//                     type=\"submit\" \r\n//                     onClick={ e => (\r\n//                         searchJWords,\r\n//                         scrollTop(largeScroll)\r\n//                     )}>\r\n//                     {isLoading ? \"Searching..\" : \"Search\"}\r\n//                  </button>\r\n\r\n//                 <p className=\"search-counter-p\"> <b>{count}</b> search results</p>\r\n\r\n//                 {words.map((a, index)=>{\r\n//                     // (needs \"return\" to work)\r\n//                     //ŠĶĪET lens viss ir tpc ka vajag savu proxy uzkodet, jo tas ekstra links ir lens\r\n                    \r\n//                     const [translations] = a.senses.map((b, index)=>{return(b.english_definitions.map(c=>{return(`${c}`)}))})\r\n                    \r\n//                     const [reading] =  a.japanese.map( b=> { return(b.reading) })\r\n                    \r\n//                     const [searchWord] = a.japanese.map( b=> { return(b.word) })\r\n                    \r\n//                     const jlpt = a.jlpt.map( b =>{ return(b !== \"\" ? `[${b}]` : \"?\")})\r\n                    \r\n//                     const [wordType] = a.senses.map( b =>{\r\n//                         return(b.parts_of_speech.map(d => {\r\n//                             return(d)\r\n//                         }) )} )\r\n                \r\n// ------------------------------------search also poga\r\n\r\n//                     const seeAlso = a.senses.map( b =>{return(b.see_also.map((c, index)=>{\r\n\r\n//                             // splits both values up and you can add second value in the [], to get the second item, if its not there, it returns as unindentified!\r\n//                             const [oneWord] = c.split(/(?<=^\\S+)\\s/)\r\n//                             // console.log(wordType)\r\n\r\n//                             // FOR SOME REASON THIS CODE RUNS 2x... the {c}\r\n//                         return(\r\n//                         <div key={index}>\r\n//                         <button \r\n//                             className=\"search-also\"\r\n//                             value={oneWord}\r\n//                             type=\"text\"\r\n                            \r\n//                             onClick={ e => {\r\n//                                 // (e) ir tas, kas šim kodam ļauj strādāt kā tieši attiecināt uz konkrēto elementu (ja lieto tik (c), tad viņš ņem visu sarakstu un nevar padot tekstu uz galveno search funkciju)\r\n//                                 const searchSeeAlso = e.target.value\r\n//                                 setQuery(searchSeeAlso)\r\n                                \r\n//                                 window.scroll !== largeScroll && scrollTop(largeScroll)\r\n//                             }}>\r\n//                             {oneWord}\r\n//                         </button>\r\n                            \r\n//                         </div>\r\n//                     )} )) })\r\n                    \r\n//                     return(\r\n//                         <div key={index}>\r\n                        \r\n//                             <h1>{searchWord}</h1>\r\n//                             <h3>[{reading}]</h3>\r\n                            \r\n//                             <h4>\r\n//                                 Word type: {wordType.map(\r\n//                                         (x,i,arr) => (i < arr.length-1) ? (` ${x},`) : (` ${x}`))\r\n//                                     }\r\n//                             </h4>\r\n                            \r\n//                             <h5>{a.is_common && \"(Is common)\"}</h5>\r\n//                             <p>{jlpt}</p> \r\n                             \r\n//                             { seeAlso !== [] && (<div>{seeAlso}</div>) }\r\n                            \r\n//                             <a href={`https://jisho.org/search/${searchWord}%20%23sentences`}>\r\n//                                 Search sentences with: {searchWord}\r\n//                             </a>\r\n//                             <ul>\r\n//                                 {translations.map( (a, index) => <li key={index}>{a}</li> )}\r\n//                             </ul>\r\n//                         </div>\r\n//                 )} )}\r\n//             </form>\r\n//             {count > 1 && (\r\n//                 <button className=\"button\"\r\n//                     onClick={ e => scrollTop(smallScroll) }>\r\n//                     Scroll back to Search\r\n//                 </button>\r\n//             )}\r\n\r\n//         </div>\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":11,"column":11,"nodeType":"32","messageId":"33","endLine":11,"endColumn":20},{"ruleId":"30","severity":1,"message":"34","line":42,"column":11,"nodeType":"32","messageId":"33","endLine":42,"endColumn":30},{"ruleId":"35","severity":1,"message":"36","line":69,"column":49,"nodeType":"37","messageId":"38","endLine":69,"endColumn":50},{"ruleId":"39","severity":1,"message":"40","line":131,"column":25,"nodeType":"41","endLine":143,"endColumn":36},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'canScroll' is assigned a value but never used.","Identifier","unusedVar","'searchSentencesLink' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]